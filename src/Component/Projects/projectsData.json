[
  {
    "id": 101,
    "title": "DevBook",
    "description": "Developer community",
    "about": "DevBook aims to cultivate a collaborative and knowledge-sharing environment within the developer community.",
    "points": [
      "Login or sign up to join the community.",
      "Read, post, update, and delete community posts to share knowledge and resources.",
      "Access and share quick links to AI websites for developer assistance."
    ],
    "image": "devbook-cover.png",
    "alttext": "DevBook cover",
    "screenshots": [
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/kpvhwu9gksm3873gli7p",
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/ltyefbbu3attws72tvve",
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/lp3rkqo7ocqjf6qt5tg7"
    ],
    "screenshots_grid": [
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/t5rkx0mjbgrdpkllqdyi",
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/vqdlrb1qc4dlmq42vwvn",
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/jwp3mzm4hhmung039onf"
    ],
    "screenshots_grid_mobile": [
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/eklzqkvzh4idrhoubo56"
    ],
    "screenshots_slide": [
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/jyvcz0z0vjzapnoyd8jx",
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/xmo6kf3csd25o50gagtc",
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/oerpq2fajmufhtbairqa",
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/ajoo4gfnvpfqqyaduoib",
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/s5xdd9vfazolfcomtx0u",
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/dlqhu91t1h5yclboendq",
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/wvyguwlxdnuaqbh0cv8m",
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/w0twtqntuezvfcmewsow",
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/u68fbenxg6yhekm6zasd"
    ],
    "techstack": ["React", "Node.js", "Express", "MongoDB"],
    "techstackIntro": "Utilizes seamless modern technology stack for robust and scalable solutions.",
    "details": [
      "Built frontend using ReactJS which fetches data from MongoDB.",
      "Markdown support for code language tagging in posts.",
      "Managed the state with Redux and secured with JWT authentication.",
      "Used Nodemailer for email sending and Cloudinary for image uploads."
    ],
    "link": "https://deevbook.onrender.com",
    "githublink": "https://github.com/sarthakc20/DevBook",
    "challenges": [
      "Implementing markdown support for code language tagging in posts. Especially in development or programming-related contexts, it's essential to implement markdown support with proper language tagging for code snippets. This allows users to format their posts cleanly, highlight syntax specific to programming languages, and improve the readability of shared code. By supporting a range of languages (e.g., JavaScript, Python, HTML), users can easily share well-structured and formatted code.",
      "Efficiently handling large amounts of user-generated content.As the platform scales and the volume of user-generated content grows, it's important to implement strategies that ensure smooth performance and scalability. This involves optimizing database queries, and possibly implementing pagination or infinite scroll mechanisms to load content dynamically.",
      "Creating a Better User Experience (UX).Improving user experience goes beyond aesthetics and involves understanding the needs and behaviors of users to create intuitive, efficient, and enjoyable interactions. This includes simplifying navigation, minimizing page load times, and offering clear, actionable feedback in response to user actions."
    ],
    "solution": "Implemented ReactMarkdown with syntax highlighting using `react-syntax-highlighter` and `remarkGfm`. Managed data efficiently with MongoDB, and using content delivery networks (CDNs) can help reduce server load and deliver content faster to users globally.",
    "result": "The markdown system was successfully integrated into the platform, significantly enhancing the user experience by enabling proper code formatting, syntax highlighting, and support for various programming languages. This allows users to easily share well-structured technical content, making posts more readable and professional. Additionally, users can now effortlessly add posts and share valuable insights, including references to AI-related websites, fostering a collaborative and resourceful developer community. This improvement has led to increased user engagement, with more developers actively contributing their knowledge and tools to assist fellow developers."
  },
  {
    "id": 102,
    "title": "E-Market",
    "description": "Ecommerce platform",
    "about": "A powerful E-Commerce web app with admin panel.",
    "points": [
      "Role-based authentication (user, admin).",
      "Search, filter, add to cart, and purchase products.",
      "Add, update, delete products, manage orders, and manage users as admin."
    ],
    "image": "emarket.png",
    "alttext": "E-Market cover",
    "screenshots": [
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/oe6bqwj46qy459lr7mr9",
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/tmqjwjbiz2ntfizrz9gy",
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/ami91llco6q7lw2uvtps"
    ],
    "screenshots_grid": [
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/f9n44vp00qiw9zscffne",
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/gjr0hvm20i5eoufwnuyo",
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/fthpqrzkrwsipotmgepq"
    ],
    "screenshots_slide": [
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/cfxelh3r2qkctjccote1",
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/fitd5w0ltx3wlgyhoyua",
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/lidhjtbule80l8x5bxyx",
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/jyknkct3igj0rhow8n70",
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/oe6j9mvtbtfzsxzfrwgi",
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/hxhw8bxebhzh5pecwcmm",
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/z4ewqedoxlocsbhab6yz",
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/tin7uf0inlevmzrnhqcf",
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/gjr0hvm20i5eoufwnuyo"
    ],
    "techstack": ["React", "Node.js", "Express", "MongoDB"],
    "techstackIntro": "Leverages a cutting-edge tech stack for a seamless shopping experience.",
    "details": [
      "Implemented a responsive and dynamic frontend using ReactJS which fetches data from MongoDB.",
      "Backend API built with Node.js and Express for efficient data handling.",
      "Implemented Redux for state management.",
      "Integrated Stripe payment gateways and secured transactions with JWT authentication.",
      "Created an Admin Panel to manage products, users, orders, and roles."
    ],
    "link": "https://e-market-cpea.onrender.com",
    "githublink": "https://github.com/sarthakc20/E-MARKET",
    "challenges": [
      "Setting up role-based authentication with separate privileges for users and admins.Implementing protected routes that restrict access based on user roles. Using middleware to verify user authentication and check if the user has appropriate privileges before accessing admin-specific features. For instance, admins can access the dashboard, manage users, and modify settings, while regular users are restricted to non-administrative pages.",
      "Efficiently handling payment gateways while maintaining security. Integrating secure payment gateway like Stripe to process transactions. Using tokenization and encryption to ensure customer payment details are protected.",
      "Managing a large product database and ensuring quick data retrieval. Achiving fast relode timing"
    ],
    "solution": "Used JWT-based authentication and protected routes for role separation. Integrated Stripe for secure payment handling and implemented MongoDB indexing for faster data queries in the admin and user dashboard. Utilized a Content Delivery Network (CDN) to deliver static assets such as images and scripts faster, reducing load times for product pages. These optimizations help improve performance, even with a large number of products in the database.",
    "result": "The app provided a seamless shopping experience, with secure and efficient transaction handling. The role-based system worked flawlessly, giving admin users complete control over the platform."
  },
  {
    "id": 103,
    "title": "Netflix Clone",
    "description": "Clone of Netflix UI",
    "about": "Recreation of Netflix's user interface.",
    "points": [
      "Sign up or log in to enjoy the user experience.",
      "Browse and discover a vast collection of movies and TV shows.",
      "Enjoy a seamless experience with responsive design and smooth UI."
    ],
    "image": "netflix.png",
    "alttext": "Netflix clone cover",
    "screenshots": [
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/tz6f8da4rtffsdhvh7v0",
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/cpiedtx5o04tjbmf5za3",
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/pc3kltgu6a7s75qcc5j2"
    ],
    "screenshots_grid": [
      "https://res.cloudinary.com/dfl9wcmy4/video/upload/v1727868606/my%20portfolio/byvletpidy7qtklafljj.mp4"
    ],
    "techstack": ["React", "Redux", "TMDB API", "Firebase"],
    "techstackIntro": "Crafted with a modern tech stack for a smooth and engaging user experience.",
    "details": [
      "Recreated Netflix UI with responsive design using ReactJS for the frontend.",
      "Data fetched from TMDB API.",
      "Managed user sessions and secure access with Firebase authentication.",
      "Managed the state with Redux."
    ],
    "link": "https://netflix-clone-five-coral-55.vercel.app/",
    "githublink": "https://github.com/sarthakc20/Netflix-Clone",
    "challenges": [
      "Integrating TMDB API to fetch real-time data for movies and TV shows. Managing API rate limits and ensuring data consistency while dynamically loading content was challenging, especially when handling various endpoints and large datasets.",
      "Handling user authentication and session management securely. Ensuring that user tokens were stored securely and managing session timeouts, alongside implementing protected routes for authenticated users, required careful planning.",
      "Ensuring the app was responsive and provided a smooth user experience on all devices. Making the interface adaptable to different screen sizes, while optimizing load times and maintaining a seamless navigation experience across platforms, was a key challenge."
    ],
    "solution": "Used Firebase authentication for secure user sessions and integrated the TMDB API for real-time content fetching. Applied advanced CSS techniques and media queries for a responsive design.",
    "result": "The app successfully replicated Netflix's UI, providing a seamless and engaging experience across all devices with secure user authentication."
  },
  {
    "id": 104,
    "title": "Autosave Doc Editor",
    "description": "Document editor with autosave",
    "about": "Harnessing advanced technology for a seamless document editing experience.",
    "points": [
      "Edit documents collaboratively in real-time with other users.",
      "Changes are automatically saved as you type, ensuring no data is lost.",
      "Format text, colors, and other elements with a rich text editor."
    ],
    "image": "doc.png",
    "alttext": "Autosave Doc cover",
    "screenshots": [
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/bosoinv08p9d54dqdyiy",
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/sx0brbekitjxrwqac2wv",
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/fk1jeqj5qwtnedmzbfjl"
    ],
    "screenshots_grid": [
      "https://res.cloudinary.com/dfl9wcmy4/video/upload/v1728501916/my%20portfolio/osm9xdfezyjglhb10z55.mp4"
    ],
    "techstack": ["React", "Node.js", "Express", "socket.io", "MongoDB"],
    "techstackIntro": "Harnessing advanced technology for a seamless document editing experience with autosave.",
    "details": [
      "Frontend developed with ReactJS, featuring real-time content editing.",
      "Autosave functionality implemented with socket.io powered by Node.js and Express.",
      "MongoDB utilized for efficient document storage and retrieval."
    ],
    "link": null,
    "githublink": "https://github.com/sarthakc20/Autosave-Doc-Editor",
    "challenges": [
      "Implementing real-time collaboration with minimal latency. Real-time updates need to be instantly reflected across all users, requiring efficient synchronization and WebSocket optimization to minimize lag, even in the presence of high network latency.",
      "Ensuring data consistency across multiple users editing the same document. Multiple users editing simultaneously can lead to conflicts, so consistency models like Operational Transformation (OT) must be implemented to ensure all users see the same version of the document."
    ],
    "solution": "Used socket.io to manage real-time data exchange and updates between multiple users. Implemented autosave using debouncing techniques to prevent excessive server load.",
    "result": "Real-time collaboration and autosave worked smoothly, allowing multiple users to edit documents simultaneously without data loss."
  },
  {
    "id": 105,
    "title": "ToDo",
    "description": "Todo List",
    "about": "Built with a modern tech stack for an intuitive and responsive experience.",
    "points": [
      "Quickly organize your day.",
      "Mark tasks as done and clear them off your list with ease.",
      "Accidental refresh? No problem, your tasks are saved and secure."
    ],
    "image": "todo.png",
    "alttext": "ToDo cover",
    "screenshots": [
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/lica6rjxcnmjt70unfcr",
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/vpd6vmgpmvuydfszpkt0",
      "https://res.cloudinary.com/dfl9wcmy4/image/upload/f_auto,q_auto/v1/my%20portfolio/hnpazbpy3x1h0uprplry"
    ],
    "techstack": ["HTML", "CSS", "JavaScript"],
    "techstackIntro": "Designed a lightweight and fast-loading experience, perfect for simplicity and easy maintenance.",
    "details": [
      "Built user interface using HTML, CSS and JavaScript.",
      "By using this to do list user can add list of to do's in order and can delete them.",
      "It has a local storage, where Todo List’s data can be saved even after refreshingthe web."
    ],
    "link": "https://sarthakc20.github.io/SarthakToDo/",
    "githublink": "https://github.com/sarthakc20/SarthakToDo",
    "challenges": [
      "Ensuring all tasks can be marked as completed or uncompleted in one action, while maintaining data consistency in the UI and accurately updating local storage. So that tasks can be marked as completed and uncompleted accordingly",
      "Creating an efficient filtering mechanism that dynamically updates the task list view based on the selected filter. While preserving task status and syncing data with local storage."
    ],
    "solution": "Implemented a Tick button that marks tasks as completed or uncompleted, updating both the task list and local storage. Added a filter to display tasks based on their status (All, Completed, Uncompleted), ensuring the UI updates dynamically while syncing with local storage.",
    "result": "The app provided a user-friendly task management interface, with smooth functionalities"
  }
]
